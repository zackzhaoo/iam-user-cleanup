AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >-
  You will be billed for the AWS resources used if you create a stack from this
  template.
  Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  A copy of the License is located at
  
      https://www.apache.org/licenses/LICENSE-2.0
  
  or in the "license" file accompanying this file. This file is distributed 
  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
  express or implied. See the License for the specific language governing 
  permissions and limitations under the License.
Parameters:
  NotificationEmail:
    Type: String
    AllowedPattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
    ConstraintDescription: Please enter a valid email.
    Description: The email address to send the list of affected users.
  MinAgeKeysToReport:
    Type: Number
    Default: 30
    MinValue: 0
    Description: The minimum age in days of access keys to include in the report.
  MinAgeKeysToDisable:
    Type: Number
    Default: 0
    MinValue: 0
    Description: The minimum age in days of access keys to disable. Set to '0' to disable this function.
  MinAgeKeysToDelete:
    Type: Number
    Default: 0
    MinValue: 0
    Description: The minimum age in days of access keys to delete. Set to '0' to disable this function.
  MinAgeUnusedUsersToReport:
    Type: Number
    Default: 30
    MinValue: 0
    Description: The minimum age in days of unused users to include in the report.
  MinAgeUnusedUsersToDisable:
    Type: Number
    Default: 0
    Description: The minimum age in days of unused users to disable. Set to '0' to disable this function.
  MinAgeUnusedUsersToDelete:
    Type: Number
    Default: 0
    MinValue: 0
    Description: The minimum age in days of unused users to delete. Set to '0' to disable this function.
  MinAgeRolesToReport:
    Type: Number
    Default: 30
    MinValue: 0
    Description: The minimum age in days of unused users to include in the report.
  MinAgeRolesToDisable:
    Type: Number
    Default: 0
    Description: The minimum age in days of unused users to disable. Set to '0' to disable this function.
  MinAgeRolesToDelete:
    Type: Number
    Default: 0
    MinValue: 0
    Description: The minimum age in days of unused users to delete. Set to '0' to disable this function.
  AnalyzerType:
    Type: String
    AllowedValues: ['NONE','ACCOUNT','ORGANIZATION']
    Default: 'ACCOUNT'
    Description: IAM Access Analyzer produces findings on the external availability of resources within your AWS account. If this account is the root account of an organization or the delegated administrator select ORGANIZATION, otherwise select ACCOUNT or NONE to skip this check.
Conditions:
  CreateAnalyzer: !Not [!Equals [!Ref AnalyzerType, NONE]]
Resources:
  # SNS Topic
  UserCleanupTopic:
    Type: 'AWS::SNS::Topic'
  UserCleanupSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref NotificationEmail
      Protocol: email
      TopicArn: !Ref UserCleanupTopic
# IAM role required for Lambda to access IAM and to send the email from SNS
  UserCleanupLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Principal:
              Service:
                lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyDocument:
              Statement:
                - Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Effect: Allow
                  Resource: 'arn:aws:logs:*:*:*'
                - Action:
                    - 'access-analyzer:ListFindings'
                    - 'iam:AttachRolePolicy'
                    - 'iam:GenerateServiceLastAccessedDetails'
                    - 'iam:GetAccessKeyLastUsed'
                    - 'iam:GetServiceLastAccessedDetails'
                    - 'iam:GetUser'
                    - 'iam:ListAccessKeys'
                    - 'iam:ListRoles'
                    - 'iam:ListUsers'
                    - 'iam:DeleteAccessKeys'
                    - 'iam:DeleteUser'
                    - 'iam:DeleteRole'
                    - 'iam:UpdateAccessKey'
                    - 'iam:UpdateUser'
                  Effect: Allow
                  Resource: '*' # Explicit that this includes all users
                - Action:
                  - 'sns:Publish'
                  Effect: Allow
                  Resource: !Ref UserCleanupTopic
              Version: 2012-10-17
            PolicyName: sec-UserCleanupRole
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W11
              reason: Asterisk used for resource as lambda is managing any iam user, role, or access key.
  # Lambda function to audit the credentials
  UserCleanupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt UserCleanupLambdaExecutionRole.Arn
      Timeout: 300
      Environment:
        Variables:
          MinAgeKeysToReport: !Ref MinAgeKeysToReport
          MinAgeKeysToDisable: !Ref MinAgeKeysToDisable
          MinAgeKeysToDelete: !Ref MinAgeKeysToDelete
          MinAgeUnusedUsersToReport: !Ref MinAgeUnusedUsersToReport
          MinAgeUnusedUsersToDisable: !Ref MinAgeUnusedUsersToDisable
          MinAgeUnusedUsersToDelete: !Ref MinAgeUnusedUsersToDelete
          MinAgeRolesToReport: !Ref MinAgeRolesToReport
          MinAgeRolesToDisable: !Ref MinAgeRolesToDisable
          MinAgeRolesToDelete: !Ref MinAgeRolesToDelete
          TopicTarget: !Ref UserCleanupTopic  
          CleanupAnalyzer: !If [CreateAnalyzer, !Ref CleanupAnalyzer, '']
      Code:
        ZipFile: |
          import json
          import boto3
          import datetime
          import time
          import os

          minAgeKeysToReport = int(os.environ['MinAgeKeysToReport'])
          minAgeKeysToDisable = int(os.environ['MinAgeKeysToDisable'])
          minAgeKeysToDelete = int(os.environ['MinAgeKeysToDelete'])
          minAgeUnusedUsersToReport = int(os.environ['MinAgeUnusedUsersToReport'])
          minAgeUnusedUsersToDisable = int(os.environ['MinAgeUnusedUsersToDisable'])
          minAgeUnusedUsersToDelete = int(os.environ['MinAgeUnusedUsersToDelete'])
          minAgeRolesToReport = int(os.environ['MinAgeRolesToReport'])
          minAgeRolesToDisable = int(os.environ['MinAgeRolesToDisable'])
          minAgeRolesToDelete = int(os.environ['MinAgeRolesToDelete'])
          CleanupAnalyzerArn = os.environ['CleanupAnalyzer']

          def lambda_handler(event, context):
              client = boto3.client('iam')
              
              today = datetime.datetime.now()
              
              report = ''
              
              # Iterate over all the users
              userResponse = client.list_users()
              for u in userResponse['Users']:
                  # Work out when the user was last used
                  passwordLastUsed = u['PasswordLastUsed'] if 'PasswordLastUsed' in u else u['CreateDate']
                  daysSinceUsed = (today - passwordLastUsed.replace(tzinfo=None)).days
                  deleted = False
                  # If the feature is enabled (>0) and the days since used > delete setting
                  if (minAgeUnusedUsersToDelete > 0 and daysSinceUsed >= minAgeUnusedUsersToDelete):
                      # Delete the user
                      client.delete_user(UserName=u['UserName'])
                      report += 'User {0} has not logged in since {1} and has been deleted\n'.format(
                          u['UserName'],
                          passwordLastUsed)
                      deleted = True
                  # else, if the features is enabled and the days since used > disable setting
                  elif (minAgeUnusedUsersToDelete > 0 and daysSinceUsed >= minAgeUnusedUsersToDisable):
                      # Force a password reset
                      client.update_login_profile(
                          UserName=u['UserName'],
                          PasswordResetRequired=True)
                      report += 'User {0} has not logged in since {1} and has been disabled\n'.format(
                          u['UserName'],
                          passwordLastUsed)
                  # else, if the days since used > report setting
                  elif (daysSinceUsed >= minAgeUnusedUsersToReport):
                      # add the user to the report
                      report += 'User {0} has not logged in since {1} and needs cleanup\n'.format(
                          u['UserName'],
                          passwordLastUsed)
                  
                  # If we haven't deleted the user
                  if not deleted:
                      # Get their access keys
                      keysResponse = client.list_access_keys(
                          UserName=u['UserName'])
                      # For each of their keys
                      for k in keysResponse['AccessKeyMetadata']:
                          # Get when the key was last used
                          lastUsedResponse = client.get_access_key_last_used(AccessKeyId=k['AccessKeyId'])
                          keyLastUsed = lastUsedResponse['AccessKeyLastUsed']['LastUsedDate'] if 'LastUsedDate' in lastUsedResponse['AccessKeyLastUsed'] else k['CreateDate']
                          daysSinceUsed = (today - keyLastUsed.replace(tzinfo=None)).days
                          # If the feature is enabled (>0) and the days since used > delete setting
                          if (minAgeKeysToDelete > 0 and daysSinceUsed >= minAgeKeysToDelete):
                              # Delete the key
                              client.delete_user(UserName=u['UserName'])
                              response = client.delete_access_key(
                                  UserName=u['UserName'],
                                  AccessKeyId=k['AccessKeyId']
                              )
                              report += 'User {0} has not used access key {1} in since {2} and has been deleted\n'.format(
                                  u['UserName'],
                                  k['AccessKeyId'],
                                  keyLastUsed)
                          # else, if the features is enabled and the days since used > disable setting
                          elif (minAgeKeysToDisable > 0 and daysSinceUsed >= minAgeKeysToDisable):
                              # Force a password reset
                              response = client.update_access_key(
                                  UserName=u['UserName'],
                                  AccessKeyId=k['AccessKeyId'],
                                  Status='Inactive'
                              )
                              report += 'User {0} has not used access key {1} in since {2} and has been disabled\n'.format(
                                  u['UserName'],
                                  k['AccessKeyId'],
                                  keyLastUsed)
                          # else, if the days since used > report setting
                          elif (daysSinceUsed >= minAgeKeysToReport):
                              # add the user to the report
                              report += 'User {0} has not used access key {1} in since {2} and needs cleanup\n'.format(
                                  u['UserName'],
                                  k['AccessKeyId'],
                                  keyLastUsed)
                  
              # Iterate over all the roles
              rolesResponse = client.list_roles(MaxItems=1000)
              for r in [r for r in rolesResponse['Roles'] if '/aws-service-role/' not in r['Path'] and '/service-role/' not in r['Path']]:
                  # We need to create a job to generate the last access report
                  jobId = client.generate_service_last_accessed_details(Arn=r['Arn'])['JobId']
                  
                  roleAccessDetails = client.get_service_last_accessed_details(JobId=jobId)
                  jobAttempt = 0
                  while roleAccessDetails['JobStatus'] == 'IN_PROGRESS':
                      time.sleep(jobAttempt*2) 
                      jobAttempt = jobAttempt + 1
                      roleAccessDetails = client.get_service_last_accessed_details(JobId=jobId)
                  if roleAccessDetails['JobStatus'] == 'FAILED':
                      report += 'Unable to retrive last access report for role {0}. No action taken.\n'.format(
                              r['Arn'])
                  else:
                      lastAccessedDates = [a['LastAuthenticated'] for a in roleAccessDetails['ServicesLastAccessed'] if 'LastAuthenticated' in a]
                      if not lastAccessedDates:
                          report += 'Role {0} has no access history. No action taken.\n'.format(
                                  r['Arn'])
                      else:
                          roleLastUsed = min(lastAccessedDates)
                          daysSinceUsed = (today - roleLastUsed.replace(tzinfo=None)).days
                          # If the feature is enabled (>0) and the days since used > delete setting
                          if (minAgeRolesToDelete > 0 and daysSinceUsed >= minAgeRolesToDelete):
                              # Delete the user
                              client.delete_role(RoleName=r['RoleName'])
                              report += 'Role {0} has not been used since {1} and has been deleted\n'.format(
                                  r['Arn'],
                                  roleLastUsed)
                          # else, if the features is enabled and the days since used > disable setting
                          elif (minAgeRolesToDelete > 0 and daysSinceUsed >= minAgeRolesToDelete):
                              # Force a password reset
                              client.attach_role_policy(
                                  PolicyArn='arn:aws:iam::aws:policy/AWSDenyAll',
                                  RoleName=r['RoleName'],
                              )
                              report += 'Role {0} has not been used since {1} and has been disabled\n'.format(
                                  r['Arn'],
                                  roleLastUsed)
                          # else, if the days since used > report setting
                          elif (daysSinceUsed >= minAgeRolesToReport):
                              # add the user to the report
                              print(r)
                              report += 'Role {0} has not been used since {1} and needs cleanup\n'.format(
                                  r['Arn'],
                                  roleLastUsed)

              # Get all findings from access analyzer if enabled
              if CleanupAnalyzerArn:
                  analyzerClient = boto3.client('accessanalyzer')
                  findings = analyzerClient.list_findings(analyzerArn=CleanupAnalyzerArn)
                  filteredFindings = [f for f in findings['findings'] if f['status'] == 'ACTIVE'] # filter just active ones
                  for f in filteredFindings:
                      report += 'Principal {0} has permission to {1} against {2} {3}. See finding {4} in IAM Access Analyzer for more information or to archive this finding.\n'.format(
                      f['principal'],
                      f['action'],
                      f['resourceType'],
                      f['resource'],
                      f['id'])
              
              if not report:
                  report = 'IAM user cleanup successfully ran. No outstanding users found.'
              else:
                  report = 'IAM user cleanup successfully ran.\n\n' + report
              
              snsClient = boto3.client('sns')
              snsClient.publish(
                  TopicArn=os.environ['TopicTarget'],
                  Subject='IAM user cleanup from ' +  context.invoked_function_arn.split(":")[4],
                  Message=report
              )

  # CloudWatch event to trigger this
  UserCleanupTrigger:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'cron(0 12 * * ? *)'
      State: 'ENABLED'
      Targets:
        -
          Arn: !GetAtt UserCleanupLambda.Arn
          Id: 'LambdaTarget'
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref UserCleanupLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt UserCleanupTrigger.Arn
  # Access analyzer to look at accessability of resources external to organization or account
  CleanupAnalyzer:
    Condition: CreateAnalyzer
    Type: AWS::AccessAnalyzer::Analyzer
    Properties:
      Type: !Ref AnalyzerType
